"""
Python script to parse nmap XML output.
This script reads an XML file generated by nmap, identifies all hosts running a web service over SSL,
and writes these as 'host:port' to an output file.
If the a flag is given, it outputs all hostport combos. 
"""

import os
import xml.etree.ElementTree as ET
import argparse


def extract_host_port_from_nmap_xml(xml_file, all_ports=False):
    """
    Extracts 'host:port' from an nmap XML file for all webservers supporting SSL or all services if all_ports is True.

    Args:
        xml_file (str): Path to the input XML file.
        all_ports (bool): Flag to bypass SSL check and extract all host:port combos.

    Returns:
        list: List of 'host:port' strings.
    """
    tree = ET.parse(xml_file)
    root = tree.getroot()

    output = []
    for host in root.findall('host'):
        address = host.find('address')
        if address is not None:
            ip = address.get('addr')
            ports = host.find('ports')
            if ports is not None:
                for port in ports.findall('port'):
                    service = port.find('service')
                    if service is not None:
                        service_name = service.get('name')
                        tunnel = service.get('tunnel')
                        if all_ports or (service_name in ['http', 'https'] and tunnel == 'ssl'):
                            output.append(f'{ip}:{port.get("portid")}')
    return output


def write_to_file(data, filename):
    """
    Writes data to a file, one line per item.

    Args:
        data (list): List of strings to be written to file.
        filename (str): Path to the output file.
    """
    with open(filename, 'w') as f:
        for line in data:
            f.write(line + '\n')


def parse_arguments():
    """
    Parses command-line arguments for the script.

    Returns:
        argparse.Namespace: Namespace object built from attributes parsed out of command line.
    """
    parser = argparse.ArgumentParser(description='Process nmap XML output.')
    parser.add_argument('-i', '--input', help='Input XML file', required=True)
    parser.add_argument('-o', '--output', help='Output text file (default: <input_path>/hostport.txt)', default=None)
    parser.add_argument('-a', '--all-ports', help='Extract all host:port combos (no SSL check)', action='store_true')
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_arguments()
    result = extract_host_port_from_nmap_xml(args.input, args.all_ports)

    # Set output file name based on flag
    input_path, _ = os.path.splitext(args.input)
    if args.all_ports:
        output_file = input_path + '_hostport_all.txt'
    else:
        output_file = input_path + '_hostport_ssl.txt'

    # Use specified output file name if provided
    if args.output is not None:
        output_file = args.output

    write_to_file(result, output_file)
